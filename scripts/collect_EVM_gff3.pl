#!/usr/bin/perl
use warnings;
use strict;
use Getopt::Long;

##############################################################
#  script: collect_EVM.gff3.pl
#  author: Jia-Xing Yue (GitHub ID: yjx1217)
#  last edited: 2018.01.30
#  description: collect the GFF3 outputs generated by EVM for each chromosomes/scaffolds in the input assembly
#  example: perl collect_EVM_gff3.pl -p genome_prefix  -r $genome_assembly
##############################################################

my ($prefix, $refseq);

GetOptions('prefix|p:s' => \$prefix,
	   'refseq|r:s' => \$refseq);

my $refseq_fh = read_file($refseq);
my @refseq = ();
my %refseq = ();
parse_fasta_file($refseq_fh, \%refseq, \@refseq);

my %gff = ();
my $output = "$prefix.EVM.raw.gff3";
my $output_fh = write_file($output);

foreach my $chr (@refseq) {
    my $gff = "\.\/$chr\/$prefix.evm.out.gff3";
    my $gff_fh = read_file($gff);
    while (<$gff_fh>) {
	chomp;
	/^#/ and next;
	/^\s*$/ and next;
	print $output_fh "$_\n";
    }
}


sub read_file {
    my $file = shift @_;
    my $fh;
    if ($file =~ /\.gz$/) {
	open($fh, "gunzip -c $file |") or die "can't open pipe to $file";
    } else {
	open($fh, $file) or die "can't open $file";
    }
    return $fh;
}

sub write_file {
    my $file = shift @_;
    my $fh;
    if ($file =~ /.gz$/) {
	open($fh, "| gzip -c >$file") or die "can't open $file\n";
    } else {
	open($fh, ">$file") or die "can't open $file\n";
    }
    return $fh;
}

sub parse_fasta_file {
    my ($fh, $seq_hashref, $seq_arraryref) = @_;
    my $seq_name = "";
    while (<$fh>) {
	chomp;
	if (/^\s*$/) {
	    next;
	} elsif (/^\s*\#/) {
	    next;
	} elsif (/^>(.*)/) {
	    $seq_name = $1;
	    $$seq_hashref{$seq_name} = "";
	    push @$seq_arraryref, $seq_name;
	} else {
	    $$seq_hashref{$seq_name} .= $_;
	}
    }
}

